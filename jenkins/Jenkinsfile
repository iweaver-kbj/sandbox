pipeline {
    agent any

    stages {
        stage('env') {
            steps {
                script {
                    env.ENVIRONMENT = params.ENVIRONMENT
                    env.BRANCH = params.BRANCH
                    for (String line : readFile(env.WORKSPACE + "/jenkins/conf-${params.ENVIRONMENT}.properties").split("\r?\n")) {
                        if (line.indexOf("=") != -1) {
                            def tokens = line.split("=")
                            def key = tokens[0]
                            def value = (tokens.length == 1) ? "" : tokens[1]

                            if (key.equals("gitRepo")) {
                                env.GIT_REPO = value
                            }
                        }
                    }
                }
                sh 'java -version'
                sh 'env | grep GIT_REPO'
            }
        }
        stage('clone git branch') {
            steps {
                echo 'checking out branch ...'
                sh ' \
                rm -rf ${WORKSPACE}/simple-spring-boot-branches/${BRANCH} || true && \
                mkdir -p ${WORKSPACE}/simple-spring-boot-branches/${BRANCH} && \
                cd ${WORKSPACE}/simple-spring-boot-branches/${BRANCH} && \
                git clone -b ${BRANCH} ${GIT_REPO} . \
                '

                script {
                    for (String line : readFile(env.WORKSPACE + "/simple-spring-boot-branches/${BRANCH}/jenkins/conf-${params.ENVIRONMENT}.properties").split("\r?\n")) {
                        if (line.indexOf("=") != -1) {
                            def tokens = line.split("=")
                            def key = tokens[0]
                            def value = (tokens.length == 1) ? "" : tokens[1]

                            if(key.equals("jar")) {
                                env.JAR = value
                            } else if(key.equals("image")) {
                                env.IMAGE = value
                            } else if(key.equals("namespace")) {
                                env.NAMESPACE = value
                            } else if(key.equals("appname")) {
                                env.APPNAME = value
                            } else if(key.equals("ingressEnabled")) {
                                env.INGRESS_ENABLED = value
                            } else if(key.equals("ingressHostName")) {
                                env.INGRESS_HOST_NAME = value
                            } else if(key.equals("dockerConfigPath")) {
                                env.DOCKER_CONFIG_PATH = value
                            }
                        }
                    }
                }
                sh 'java -version'
                sh 'env | grep JAR'
                sh 'env | grep IMAGE'
                sh 'env | grep NAMESPACE'
                sh 'env | grep INGRESS_ENABLED'
                sh 'env | grep INGRESS_HOST_NAME'
                sh 'env | grep DOCKER_CONFIG_PATH'
            }
        }
        stage('build docker') {
            steps {
                echo 'building docker image ...'
                sh ' \
                cd ${WORKSPACE}/simple-spring-boot-branches/${BRANCH}/docker && \
                chmod +x build-docker.sh && \
                ./build-docker.sh \
                --jar=${JAR} \
                --image=${IMAGE} \
                '
            }
        }
        stage('create image pull secret') {
            steps {
                echo 'creating image pull secret ...'
                sh ' \
                kubectl create ns ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - && \
                kubectl create secret generic simple-reg-cred \
                --from-file=.dockerconfigjson=${DOCKER_CONFIG_PATH} \
                --type=kubernetes.io/dockerconfigjson \
                -n ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - \
                '
            }
        }
        stage('deploy') {
            steps {
                echo 'deploying ...'
                sh ' \
                cd ${WORKSPACE}/simple-spring-boot-branches/${BRANCH}/chart && \
                helm upgrade \
                ${NAMESPACE} \
                --install \
                --create-namespace \
                --namespace ${NAMESPACE} \
                --values ${WORKSPACE}/simple-spring-boot-branches/${BRANCH}/jenkins/values-${ENVIRONMENT}.yaml \
                . \
                '

                echo 'rolling out deployment...'
                sh 'kubectl rollout restart deploy ${APPNAME} -n ${NAMESPACE}'

            }
        }
    }
}